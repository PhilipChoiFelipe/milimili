{"ast":null,"code":"import _classCallCheck from \"/Users/PhilipChoi/Desktop/milimili/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/PhilipChoi/Desktop/milimili/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/PhilipChoi/Desktop/milimili/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/PhilipChoi/Desktop/milimili/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/PhilipChoi/Desktop/milimili/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/PhilipChoi/Desktop/milimili/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/PhilipChoi/Desktop/milimili/src/WriteComment.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport firebase from 'firebase/app';\nimport 'firebase/database';\n\nvar WriteComment =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(WriteComment, _Component);\n\n  function WriteComment(props) {\n    var _this;\n\n    _classCallCheck(this, WriteComment);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(WriteComment).call(this, props));\n\n    _this.updateComment = function (event) {\n      event.preventDefault();\n\n      _this.setState({\n        comment: event.target.value\n      });\n    };\n\n    _this.onCommentSubmit = function (e) {\n      e.preventDefault(); //don't submit\n\n      /* TODO: add a new Chirp to the database */\n      // let propsUser = this.props.currentUser;\n\n      if (_this.state.comment.length === 0) {\n        alert(\"댓글을 적어주세요!\");\n      } else if (_this.state.comment.length > 250) {\n        alert(\"댓글은 250자 이내로 써주세요!\");\n      } else {\n        var color = _this.getRandomColor();\n\n        firebase.database().ref(\"shared/diaries/\").child(_this.props.diary.key).child(\"comments\").on(\"value\", function (snapshot) {\n          for (var key in snapshot.val()) {\n            if (snapshot.exists && snapshot.val()[key].userID === _this.props.currentUser.uid) {\n              color = snapshot.val()[key].color;\n              console.log(color);\n            }\n          }\n        });\n        var newComment = {\n          userID: _this.props.currentUser.uid,\n          text: _this.state.comment,\n          time: firebase.database.ServerValue.TIMESTAMP,\n          color: color,\n          displayName: _this.props.currentUser.displayName\n        };\n        console.log(\"commentsubmitted\");\n        console.log(_this.state.comment); //.child(`${this.props.diary.userID}-${this.props.diary.date}`)\n\n        firebase.database().ref(\"shared/diaries/\").child(_this.props.diary.key).child(\"comments\").push(newComment);\n\n        _this.setState({\n          comment: ''\n        }); //empty out post for next time\n\n      }\n    };\n\n    _this.state = {\n      comment: ''\n    };\n    _this.updateComment = _this.updateComment.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(WriteComment, [{\n    key: \"getRandomColor\",\n    value: function getRandomColor() {\n      var letters = 'BCDEF'.split('');\n      var color = '#';\n\n      for (var i = 0; i < 6; i++) {\n        color += letters[Math.floor(Math.random() * letters.length)];\n      }\n\n      return color;\n    }\n  }, {\n    key: \"render\",\n    //onKeyPress={this.handleKeyPress}\n    value: function render() {\n      console.log(\"for comment section\");\n      console.log(this.props.diary);\n      return React.createElement(\"div\", {\n        className: \"text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        className: \"commentForm\",\n        onSubmit: this.onCommentSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, React.createElement(\"textarea\", {\n        className: \"form-control\",\n        value: this.state.comment,\n        id: \"textarea\",\n        name: \"text\",\n        rows: \"2\",\n        cols: \"80\",\n        type: \"text\",\n        placeholder: \"\\uD560\\uB9D0..\",\n        onChange: this.updateComment,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"text-right\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        type: \"submit\",\n        className: \"btn btn-light mb-5 ml-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, \"\\uC785\\uB825\")))));\n    }\n  }]);\n\n  return WriteComment;\n}(Component);\n\nexport default WriteComment;","map":{"version":3,"sources":["/Users/PhilipChoi/Desktop/milimili/src/WriteComment.js"],"names":["React","Component","firebase","WriteComment","props","updateComment","event","preventDefault","setState","comment","target","value","onCommentSubmit","e","state","length","alert","color","getRandomColor","database","ref","child","diary","key","on","snapshot","val","exists","userID","currentUser","uid","console","log","newComment","text","time","ServerValue","TIMESTAMP","displayName","push","bind","letters","split","i","Math","floor","random"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport firebase from 'firebase/app';\nimport 'firebase/database';\n\nclass WriteComment extends Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        comment: ''\n      }\n      this.updateComment = this.updateComment.bind(this)\n    }\n  \n    updateComment = (event) => {\n      event.preventDefault();\n      this.setState({ comment: event.target.value });\n    }\n  \n    getRandomColor() {\n               var letters = 'BCDEF'.split('');\n                  var color = '#';\n                  for (var i = 0; i < 6; i++ ) {\n                      color += letters[Math.floor(Math.random() * letters.length)];\n                  }\n                  return color;\n    }\n  \n    onCommentSubmit = (e) => {\n      e.preventDefault(); //don't submit\n      /* TODO: add a new Chirp to the database */\n      // let propsUser = this.props.currentUser;\n      if(this.state.comment.length === 0){\n        alert(\"댓글을 적어주세요!\")\n      }else if(this.state.comment.length > 250){\n        alert(\"댓글은 250자 이내로 써주세요!\")\n      }else{\n      let color = this.getRandomColor();\n      firebase.database().ref(`shared/diaries/`).child(this.props.diary.key).child(\"comments\").on(\"value\", (snapshot) => {\n        for (let key in snapshot.val()) {\n          if (snapshot.exists && snapshot.val()[key].userID === this.props.currentUser.uid) {\n            color = snapshot.val()[key].color\n            console.log(color);\n          }\n        }\n      })\n      let newComment = {\n        userID: this.props.currentUser.uid,\n        text: this.state.comment,\n        time: firebase.database.ServerValue.TIMESTAMP,\n        color: color,\n        displayName: this.props.currentUser.displayName\n      }\n      console.log(\"commentsubmitted\")\n      console.log(this.state.comment)\n      //.child(`${this.props.diary.userID}-${this.props.diary.date}`)\n      firebase.database().ref(`shared/diaries/`).child(this.props.diary.key).child(\"comments\").push(newComment)\n      this.setState({ comment: '' }); //empty out post for next time\n    }\n    }\n  \n    //onKeyPress={this.handleKeyPress}\n    render() {\n      console.log(\"for comment section\")\n      console.log(this.props.diary)\n      return (\n        <div className=\"text-center\">\n          <div className=\"container\">\n            <form className=\"commentForm\" onSubmit={this.onCommentSubmit}>\n              <textarea className=\"form-control\" value={this.state.comment} id=\"textarea\" name=\"text\" rows=\"2\" cols=\"80\" type=\"text\"\n                placeholder=\"할말..\" onChange={this.updateComment}></textarea>\n              <div className=\"text-right\">\n                <button type=\"submit\" className=\"btn btn-light mb-5 ml-2\">입력</button>\n              </div>\n            </form>\n            {/* <button className=\"btn btn-primary \">\n  \n                입력\n                  </button> */}\n          </div>\n        </div>\n      );\n    }\n  }\n\n  export default WriteComment"]},"metadata":{},"sourceType":"module"}