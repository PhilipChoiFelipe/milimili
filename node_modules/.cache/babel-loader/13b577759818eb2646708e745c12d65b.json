{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TagCloud = undefined;\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _defaultRenderer = require('./defaultRenderer');\n\nvar _arrayShuffle = require('array-shuffle');\n\nvar _arrayShuffle2 = _interopRequireDefault(_arrayShuffle);\n\nvar _randomcolor = require('randomcolor');\n\nvar _randomcolor2 = _interopRequireDefault(_randomcolor);\n\nvar _helpers = require('./helpers');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar eventHandlers = ['onClick', 'onDoubleClick', 'onMouseMove'];\nvar cloudProps = ['tags', 'shuffle', 'renderer', 'maxSize', 'minSize', 'colorOptions', 'disableRandomColor'];\n\nvar generateColor = function generateColor(tag, _ref) {\n  var disableRandomColor = _ref.disableRandomColor,\n      colorOptions = _ref.colorOptions;\n\n  if (tag.color) {\n    return tag.color;\n  }\n\n  if (disableRandomColor) {\n    return undefined;\n  }\n\n  return (0, _randomcolor2.default)(colorOptions);\n};\n\nvar TagCloud = exports.TagCloud = function (_React$Component) {\n  _inherits(TagCloud, _React$Component);\n\n  function TagCloud() {\n    _classCallCheck(this, TagCloud);\n\n    return _possibleConstructorReturn(this, (TagCloud.__proto__ || Object.getPrototypeOf(TagCloud)).apply(this, arguments));\n  }\n\n  _createClass(TagCloud, [{\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(newProps) {\n      var propsEqual = (0, _helpers.propertiesEqual)(this.props, newProps, Object.keys(TagCloud.propTypes));\n      var tagsEqual = (0, _helpers.arraysEqual)(newProps.tags, this.props.tags);\n\n      if (!tagsEqual || !propsEqual) {\n        this._populate(newProps);\n      }\n    }\n  }, {\n    key: 'componentWillMount',\n    value: function componentWillMount() {\n      this._populate(this.props);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var props = (0, _helpers.omitProps)(this.props, [].concat(cloudProps, eventHandlers));\n\n      var tagElements = this._attachEventHandlers();\n\n      return _react2.default.createElement('div', props, tagElements);\n    }\n  }, {\n    key: '_attachEventHandlers',\n    value: function _attachEventHandlers() {\n      var _this2 = this;\n\n      var cloudHandlers = (0, _helpers.includeProps)(this.props, eventHandlers);\n      return this._data.map(function (_ref2) {\n        var tag = _ref2.tag,\n            fontSize = _ref2.fontSize,\n            color = _ref2.color;\n\n        var elem = _this2.props.renderer(tag, fontSize, color);\n\n        var tagHandlers = (0, _helpers.includeProps)(elem.props, eventHandlers);\n        var globalHandlers = Object.keys(cloudHandlers).reduce(function (r, k) {\n          r[k] = function (e) {\n            cloudHandlers[k](tag, e);\n            tagHandlers[k] && tagHandlers(e);\n          };\n\n          return r;\n        }, {});\n        return _react2.default.cloneElement(elem, globalHandlers);\n      });\n    }\n  }, {\n    key: '_populate',\n    value: function _populate(props) {\n      var tags = props.tags,\n          shuffle = props.shuffle,\n          minSize = props.minSize,\n          maxSize = props.maxSize;\n      var counts = tags.map(function (tag) {\n        return tag.count;\n      }),\n          min = Math.min.apply(Math, _toConsumableArray(counts)),\n          max = Math.max.apply(Math, _toConsumableArray(counts));\n      var data = tags.map(function (tag) {\n        return {\n          tag: tag,\n          color: generateColor(tag, props),\n          fontSize: (0, _helpers.fontSizeConverter)(tag.count, min, max, minSize, maxSize)\n        };\n      });\n      this._data = shuffle ? (0, _arrayShuffle2.default)(data) : data;\n    }\n  }]);\n\n  return TagCloud;\n}(_react2.default.Component);\n\nTagCloud.propTypes = {\n  tags: _propTypes2.default.array.isRequired,\n  maxSize: _propTypes2.default.number.isRequired,\n  minSize: _propTypes2.default.number.isRequired,\n  shuffle: _propTypes2.default.bool,\n  colorOptions: _propTypes2.default.object,\n  disableRandomColor: _propTypes2.default.bool,\n  renderer: _propTypes2.default.func,\n  className: _propTypes2.default.string\n};\nTagCloud.defaultProps = {\n  renderer: _defaultRenderer.defaultRenderer,\n  shuffle: true,\n  className: 'tag-cloud',\n  colorOptions: {}\n};","map":null,"metadata":{},"sourceType":"script"}