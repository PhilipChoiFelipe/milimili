{"ast":null,"code":"import _classCallCheck from \"/Users/PhilipChoi/Desktop/milimili/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/PhilipChoi/Desktop/milimili/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/PhilipChoi/Desktop/milimili/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/PhilipChoi/Desktop/milimili/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/PhilipChoi/Desktop/milimili/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/PhilipChoi/Desktop/milimili/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/PhilipChoi/Desktop/milimili/src/CommentList.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport firebase from 'firebase/app';\nimport 'firebase/database';\nimport Pagination from \"react-js-pagination\";\nimport ReactPaginate from 'react-paginate'; // import \"bootstrap-less\";\n// require(\"bootstrap/less/bootstrap.less\");\n\nvar CommentList =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CommentList, _Component);\n\n  function CommentList(props) {\n    var _this;\n\n    _classCallCheck(this, CommentList);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CommentList).call(this, props));\n\n    _this.removeComment = function (commentKey) {\n      if (window.confirm('정말로 지우시겠습니까?')) {\n        firebase.database().ref(\"shared/diaries/\").child(_this.props.diary.key).child(\"comments\").child(commentKey).remove();\n      }\n    };\n\n    _this.state = {\n      comments: [],\n      pageCount: ''\n    };\n    _this.handlePageChange = _this.handlePageChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(CommentList, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      firebase.database().ref(\"shared/diaries/\").child(this.props.diary.key).child(\"comments\").on(\"value\", function (snapshot) {\n        if (snapshot.exists()) {\n          _this2.setState({\n            comments: snapshot.val()\n          });\n        }\n      });\n    }\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      firebase.database().ref('unregister').off();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      // let refComment = firebase.database().ref(`shared/diaries/${this.props.diary.userID}-${this.props.diary.date}/comments`)\n      // console.log(typeof(refComment))\n      var content = ''; // console.log(\"comments\")\n      // console.log(this.state.comments)\n\n      if (this.state.comments !== []) {\n        var commentKeys = Object.keys(this.state.comments); // console.log(chirpsKeys);\n\n        var commentObject = commentKeys.map(function (key) {\n          var commentObj = _this3.state.comments[key];\n          commentObj.id = key;\n          return commentObj;\n        });\n        content = commentObject.map(function (object) {\n          return React.createElement(SingleComment, {\n            removeComment: _this3.removeComment,\n            key: object.id,\n            comment: object,\n            currentUser: _this3.props.currentUser,\n            diary: _this3.props.diary,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 59\n            },\n            __self: this\n          });\n        });\n      }\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, content);\n    }\n  }]);\n\n  return CommentList;\n}(Component);\n\nvar SingleComment =\n/*#__PURE__*/\nfunction (_Component2) {\n  _inherits(SingleComment, _Component2);\n\n  function SingleComment() {\n    var _getPrototypeOf2;\n\n    var _this4;\n\n    _classCallCheck(this, SingleComment);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this4 = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SingleComment)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this4.removeComment = function () {\n      _this4.props.removeComment(_this4.props.comment.id); // console.log(this.props.comment.id)\n\n    };\n\n    return _this4;\n  }\n\n  _createClass(SingleComment, [{\n    key: \"render\",\n    value: function render() {\n      var comment = this.props.comment; //<span className=\"handle\">{comment.userName} </span>\n\n      var content = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }); //others comment \n      //if comment's commenter's id is different that writer's id\n\n      var button = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      });\n\n      if (this.props.comment.userID === this.props.currentUser.uid) {\n        button = React.createElement(\"div\", {\n          className: \"col-1\",\n          id: \"removeComment\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          id: \"oneCommentIn\",\n          onClick: this.removeComment,\n          className: \"btn\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85\n          },\n          __self: this\n        }, \"x\"));\n      }\n\n      if (this.props.comment.userID !== this.props.diary.userID) {\n        content = React.createElement(\"div\", {\n          className: \"container mb-3\",\n          id: \"commentContainerOther\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"row p-3 py-2 border\",\n          id: \"oneComment\",\n          style: {\n            backgroundColor: this.props.comment.color\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"col-lg-2 col-md-3\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          id: \"oneCommentIn\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95\n          },\n          __self: this\n        }, this.props.comment.displayName)), React.createElement(\"div\", {\n          className: \"col pl-4 pl-lg-1 align-center\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99\n          },\n          __self: this\n        }, comment.text), button)); //writer's comment\n      } else {\n        content = React.createElement(\"div\", {\n          className: \"container mb-3\",\n          id: \"commentContainerOwn\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"row p-3 py-2 bg-white border\",\n          id: \"ownComment\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 110\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"col-lg-2 col-md-3\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          id: \"oneCommentIn\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112\n          },\n          __self: this\n        }, this.props.comment.displayName)), React.createElement(\"div\", {\n          className: \"col pl-4 pl-lg-1\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          id: \"commentBox\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118\n          },\n          __self: this\n        }, comment.text)), button));\n      }\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, content);\n    }\n  }]);\n\n  return SingleComment;\n}(Component);\n\nexport default CommentList;","map":{"version":3,"sources":["/Users/PhilipChoi/Desktop/milimili/src/CommentList.js"],"names":["React","Component","firebase","Pagination","ReactPaginate","CommentList","props","removeComment","commentKey","window","confirm","database","ref","child","diary","key","remove","state","comments","pageCount","handlePageChange","bind","on","snapshot","exists","setState","val","off","content","commentKeys","Object","keys","commentObject","map","commentObj","id","object","currentUser","SingleComment","comment","button","userID","uid","backgroundColor","color","displayName","text"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport firebase from 'firebase/app';\nimport 'firebase/database';\nimport Pagination from \"react-js-pagination\";\nimport ReactPaginate from 'react-paginate';\n// import \"bootstrap-less\";\n\n// require(\"bootstrap/less/bootstrap.less\");\n\n\nclass CommentList extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            comments: [],\n            pageCount: ''\n        }\n        this.handlePageChange = this.handlePageChange.bind(this)\n\n    }\n\n\n\n    removeComment = (commentKey) => {\n        if (window.confirm('정말로 지우시겠습니까?')) {\n            firebase.database().ref(`shared/diaries/`).child(this.props.diary.key).child(\"comments\").child(commentKey).remove();\n        }\n    }\n\n    componentDidMount() {\n        firebase.database().ref(`shared/diaries/`).child(this.props.diary.key).child(\"comments\").on(\"value\", (snapshot) => {\n            if (snapshot.exists()) {\n                this.setState({ comments: snapshot.val() })\n            }\n        })\n    }\n\n    componentWillMount() {\n        firebase.database().ref('unregister').off();\n    }\n    render() {\n        // let refComment = firebase.database().ref(`shared/diaries/${this.props.diary.userID}-${this.props.diary.date}/comments`)\n        // console.log(typeof(refComment))\n        let content = '';\n        // console.log(\"comments\")\n        // console.log(this.state.comments)\n        if (this.state.comments !== []) {\n            let commentKeys = Object.keys(this.state.comments)\n            // console.log(chirpsKeys);\n            let commentObject = commentKeys.map((key) => {\n                let commentObj = this.state.comments[key];\n                commentObj.id = key;\n                return commentObj;\n            })\n            content = commentObject.map((object) => {\n                return (<SingleComment removeComment={this.removeComment} key={object.id} comment={object} currentUser={this.props.currentUser} diary={this.props.diary} />)\n            })\n        }\n        return (\n            <div>\n                {content}\n            </div>);\n    }\n}\n\n\nclass SingleComment extends Component {\n    removeComment = () => {\n        this.props.removeComment(this.props.comment.id);\n        // console.log(this.props.comment.id)\n    }\n\n    render() {\n        let comment = this.props.comment;\n        //<span className=\"handle\">{comment.userName} </span>\n        let content = <div></div>\n        //others comment \n        //if comment's commenter's id is different that writer's id\n        let button = <div></div>;\n        if (this.props.comment.userID === this.props.currentUser.uid) {\n            button = (<div className=\"col-1\" id=\"removeComment\">\n                <button id=\"oneCommentIn\" onClick={this.removeComment} className=\"btn\">\n                    x\n        </button>\n            </div>)\n        }\n        if (this.props.comment.userID !== this.props.diary.userID) {\n            content = (\n                <div className=\"container mb-3\" id=\"commentContainerOther\">\n                    <div className=\"row p-3 py-2 border\" id=\"oneComment\" style={{ backgroundColor: this.props.comment.color }}>\n                        <div className=\"col-lg-2 col-md-3\">\n                            <p id=\"oneCommentIn\">\n                                {this.props.comment.displayName}\n                            </p>\n                        </div>\n                        <div className=\"col pl-4 pl-lg-1 align-center\">\n                            {/* <span className=\"time\"><Time value={comment.time} relative/></span> */}\n                            {comment.text}\n                        </div>\n                        {button}\n                    </div>\n                </div>)\n            //writer's comment\n        } else {\n            content = (\n                <div className=\"container mb-3\" id=\"commentContainerOwn\">\n                    <div className=\"row p-3 py-2 bg-white border\" id=\"ownComment\">\n                        <div className=\"col-lg-2 col-md-3\">\n                            <p id=\"oneCommentIn\">\n                                {this.props.comment.displayName}\n                            </p>\n                        </div>\n                        <div className=\"col pl-4 pl-lg-1\">\n                            {/* <span className=\"time\"><Time value={comment.time} relative/></span> */}\n                            <div id=\"commentBox\">{comment.text}</div>\n                        </div>\n                        {button}\n                    </div>\n                </div>\n            )\n        }\n        return (\n            <div>\n                {content}\n\n            </div>\n        )\n    }\n}\n\nexport default CommentList"]},"metadata":{},"sourceType":"module"}