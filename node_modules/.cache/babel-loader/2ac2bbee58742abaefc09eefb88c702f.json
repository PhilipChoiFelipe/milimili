{"ast":null,"code":"import _classCallCheck from \"/Users/PhilipChoi/Desktop/milimili/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/PhilipChoi/Desktop/milimili/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/PhilipChoi/Desktop/milimili/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/PhilipChoi/Desktop/milimili/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/PhilipChoi/Desktop/milimili/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/PhilipChoi/Desktop/milimili/src/CommentList.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport firebase from 'firebase/app';\nimport 'firebase/database';\n\nvar CommentList =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CommentList, _Component);\n\n  function CommentList(props) {\n    var _this;\n\n    _classCallCheck(this, CommentList);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CommentList).call(this, props));\n\n    _this.removeComment = function (commentKey) {\n      firebase.database().ref(\"shared/diaries/\").child(_this.props.diary.key).child(\"comments\").child(commentKey).remove();\n    };\n\n    _this.state = {\n      comments: []\n    };\n    return _this;\n  }\n\n  _createClass(CommentList, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      firebase.database().ref(\"shared/diaries/\").child(this.props.diary.key).child(\"comments\").on(\"value\", function (snapshot) {\n        console.log(snapshot.val());\n\n        if (snapshot.exists()) {\n          _this2.setState({\n            comments: snapshot.val()\n          });\n        }\n      });\n    }\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      firebase.database().ref('unregister').off();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      // let refComment = firebase.database().ref(`shared/diaries/${this.props.diary.userID}-${this.props.diary.date}/comments`)\n      // console.log(typeof(refComment))\n      var content = '';\n      console.log(\"comments\");\n      console.log(this.state.comments);\n\n      if (this.state.comments !== []) {\n        var commentKeys = Object.keys(this.state.comments); // console.log(chirpsKeys);\n\n        var commentObject = commentKeys.map(function (key) {\n          var commentObj = _this3.state.comments[key];\n          commentObj.id = key;\n          return commentObj;\n        });\n        content = commentObject.map(function (object) {\n          return React.createElement(SingleComment, {\n            removeComment: _this3.removeComment,\n            key: object.id,\n            comment: object,\n            currentUser: _this3.props.currentUser,\n            diary: _this3.props.diary,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 46\n            },\n            __self: this\n          });\n        });\n      }\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, content);\n    }\n  }]);\n\n  return CommentList;\n}(Component);\n\nvar SingleComment =\n/*#__PURE__*/\nfunction (_Component2) {\n  _inherits(SingleComment, _Component2);\n\n  function SingleComment() {\n    var _getPrototypeOf2;\n\n    var _this4;\n\n    _classCallCheck(this, SingleComment);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this4 = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SingleComment)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this4.removeComment = function () {\n      _this4.props.removeComment(_this4.props.comment.id);\n\n      console.log(_this4.props.comment.id);\n    };\n\n    return _this4;\n  }\n\n  _createClass(SingleComment, [{\n    key: \"render\",\n    value: function render() {\n      console.log(this.props.currentUser.uid);\n      console.log(this.props.diary.userID);\n      var comment = this.props.comment; //<span className=\"handle\">{comment.userName} </span>\n\n      var content = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }); //others comment \n      //if comment's commenter's id is different that writer's id\n\n      var button = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      });\n\n      if (this.props.comment.userID === this.props.currentUser.uid) {\n        button = React.createElement(\"div\", {\n          className: \"col-1\",\n          id: \"removeComment\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          id: \"oneCommentIn\",\n          onClick: this.removeComment,\n          className: \"btn\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74\n          },\n          __self: this\n        }, \"x\"));\n      }\n\n      if (this.props.comment.userID !== this.props.diary.userID) {\n        content = React.createElement(\"div\", {\n          className: \"container mb-3\",\n          id: \"commentContainerOther\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"row p-3 py-2 border\",\n          id: \"oneComment\",\n          style: {\n            backgroundColor: this.props.comment.color\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"col-lg-2 col-md-3\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          id: \"oneCommentIn\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84\n          },\n          __self: this\n        }, this.props.comment.displayName)), React.createElement(\"div\", {\n          className: \"col pl-4 pl-lg-1 align-center\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90\n          },\n          __self: this\n        }, comment.text)), button)); //writer's comment\n      } else {\n        content = React.createElement(\"div\", {\n          className: \"container mb-3\",\n          id: \"commentContainerOwn\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"row p-3 py-2 bg-white border\",\n          id: \"ownComment\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"col-lg-2 col-md-3\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          id: \"oneCommentIn\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101\n          },\n          __self: this\n        }, this.props.comment.displayName)), React.createElement(\"div\", {\n          className: \"col pl-4 pl-lg-1\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107\n          },\n          __self: this\n        }, comment.text)), button));\n      }\n\n      console.log(document.getElementById('removeComment'));\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, content);\n    }\n  }]);\n\n  return SingleComment;\n}(Component);\n\nexport default CommentList;","map":{"version":3,"sources":["/Users/PhilipChoi/Desktop/milimili/src/CommentList.js"],"names":["React","Component","firebase","CommentList","props","removeComment","commentKey","database","ref","child","diary","key","remove","state","comments","on","snapshot","console","log","val","exists","setState","off","content","commentKeys","Object","keys","commentObject","map","commentObj","id","object","currentUser","SingleComment","comment","uid","userID","button","backgroundColor","color","displayName","text","document","getElementById"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport firebase from 'firebase/app';\nimport 'firebase/database';\n\nclass CommentList extends Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        comments: []\n      }\n    }\n    removeComment = (commentKey) => {\n      firebase.database().ref(`shared/diaries/`).child(this.props.diary.key).child(\"comments\").child(commentKey).remove();\n    }\n  \n    componentDidMount() {\n      firebase.database().ref(`shared/diaries/`).child(this.props.diary.key).child(\"comments\").on(\"value\", (snapshot) => {\n        console.log(snapshot.val())\n        if (snapshot.exists()) {\n          this.setState({ comments: snapshot.val() })\n        }\n      })\n    }\n  \n    componentWillMount() {\n      firebase.database().ref('unregister').off();\n    }\n    render() {\n      // let refComment = firebase.database().ref(`shared/diaries/${this.props.diary.userID}-${this.props.diary.date}/comments`)\n      // console.log(typeof(refComment))\n      let content = '';\n      console.log(\"comments\")\n      console.log(this.state.comments)\n      if (this.state.comments !== []) {\n        let commentKeys = Object.keys(this.state.comments)\n        // console.log(chirpsKeys);\n        let commentObject = commentKeys.map((key) => {\n          let commentObj = this.state.comments[key];\n          commentObj.id = key;\n          return commentObj;\n        })\n        content = commentObject.map((object) => {\n          return (<SingleComment removeComment ={this.removeComment}key={object.id} comment={object} currentUser={this.props.currentUser} diary={this.props.diary} />)\n        })\n      }\n      return (\n        <div>\n          {content}\n        </div>);\n    }\n  }\n  \n  \n  class SingleComment extends Component {\n    removeComment = () => {\n      this.props.removeComment(this.props.comment.id);\n      console.log(this.props.comment.id)\n    }\n  \n    render() {\n      console.log(this.props.currentUser.uid)\n      console.log(this.props.diary.userID)\n      let comment = this.props.comment;\n      //<span className=\"handle\">{comment.userName} </span>\n      let content = <div></div>\n      //others comment \n      //if comment's commenter's id is different that writer's id\n      let button = <div></div>;\n      if(this.props.comment.userID === this.props.currentUser.uid){\n        button = (<div className=\"col-1\" id=\"removeComment\">\n        <button id=\"oneCommentIn\" onClick={this.removeComment} className=\"btn\">\n          x\n        </button>\n      </div>)\n      }\n      if (this.props.comment.userID !== this.props.diary.userID) {\n        content = (\n          <div className=\"container mb-3\" id=\"commentContainerOther\">\n            <div className=\"row p-3 py-2 border\" id=\"oneComment\" style={{ backgroundColor: this.props.comment.color }}>\n              <div className=\"col-lg-2 col-md-3\">\n                <p id=\"oneCommentIn\">\n                  {this.props.comment.displayName}\n          </p>\n              </div>\n              <div className=\"col pl-4 pl-lg-1 align-center\">\n                {/* <span className=\"time\"><Time value={comment.time} relative/></span> */}\n                <div>{comment.text}</div>\n              </div>\n              {button}\n            </div>\n          </div>)\n        //writer's comment\n         } else {\n        content = (\n          <div className=\"container mb-3\" id=\"commentContainerOwn\">\n            <div className=\"row p-3 py-2 bg-white border\" id=\"ownComment\">\n              <div className=\"col-lg-2 col-md-3\">\n                <p id=\"oneCommentIn\">\n                  {this.props.comment.displayName}\n              </p>\n              </div>\n              <div className=\"col pl-4 pl-lg-1\">\n                {/* <span className=\"time\"><Time value={comment.time} relative/></span> */}\n                <div>{comment.text}</div>\n              </div>\n                {button}\n            </div>\n          </div>\n        )\n      }    \n      console.log(document.getElementById('removeComment'))\n      return (\n        <div>\n          {content}\n          \n        </div>\n      )\n    }\n  }\n\n  export default CommentList"]},"metadata":{},"sourceType":"module"}