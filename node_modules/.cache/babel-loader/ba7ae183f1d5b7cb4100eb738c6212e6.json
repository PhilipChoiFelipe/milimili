{"ast":null,"code":"import _classCallCheck from \"/Users/PhilipChoi/Desktop/milimili/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/PhilipChoi/Desktop/milimili/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/PhilipChoi/Desktop/milimili/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/PhilipChoi/Desktop/milimili/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/PhilipChoi/Desktop/milimili/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/PhilipChoi/Desktop/milimili/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/PhilipChoi/Desktop/milimili/src/CommentList.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport firebase from 'firebase/app';\nimport 'firebase/database';\nimport ReactPaginate from 'react-paginate'; // import \"bootstrap-less\";\n// require(\"bootstrap/less/bootstrap.less\");\n\nvar CommentList =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CommentList, _Component);\n\n  function CommentList(props) {\n    var _this;\n\n    _classCallCheck(this, CommentList);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CommentList).call(this, props));\n\n    _this.removeComment = function (commentKey) {\n      firebase.database().ref(\"shared/diaries/\").child(_this.props.diary.key).child(\"comments\").child(commentKey).remove();\n    };\n\n    _this.state = {\n      comments: [],\n      activePage: ''\n    };\n    _this.handlePageChange = _this.handlePageChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(CommentList, [{\n    key: \"handlePageChange\",\n    value: function handlePageChange(pageNumber) {\n      console.log(\"active page is \".concat(pageNumber));\n      this.setState({\n        activePage: pageNumber\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      firebase.database().ref(\"shared/diaries/\").child(this.props.diary.key).child(\"comments\").on(\"value\", function (snapshot) {\n        console.log(snapshot.val());\n\n        if (snapshot.exists()) {\n          _this2.setState({\n            comments: snapshot.val()\n          });\n        }\n      });\n    }\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      firebase.database().ref('unregister').off();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      // let refComment = firebase.database().ref(`shared/diaries/${this.props.diary.userID}-${this.props.diary.date}/comments`)\n      // console.log(typeof(refComment))\n      var content = '';\n      console.log(\"comments\");\n      console.log(this.state.comments);\n\n      if (this.state.comments !== []) {\n        var commentKeys = Object.keys(this.state.comments); // console.log(chirpsKeys);\n\n        var commentObject = commentKeys.map(function (key) {\n          var commentObj = _this3.state.comments[key];\n          commentObj.id = key;\n          return commentObj;\n        });\n        content = commentObject.map(function (object) {\n          return React.createElement(SingleComment, {\n            removeComment: _this3.removeComment,\n            key: object.id,\n            comment: object,\n            currentUser: _this3.props.currentUser,\n            diary: _this3.props.diary,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 61\n            },\n            __self: this\n          });\n        });\n      }\n\n      return React.createElement(\"div\", {\n        className: \"container commentBox\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, content, React.createElement(ReactPaginate, {\n        previousLabel: 'previous',\n        nextLabel: 'next',\n        breakLabel: '...',\n        breakClassName: 'break-me',\n        pageCount: this.state.pageCount,\n        marginPagesDisplayed: 2,\n        pageRangeDisplayed: 5 // onPageChange={this.handlePageClick}\n        ,\n        containerClassName: 'pagination',\n        subContainerClassName: 'pages pagination',\n        activeClassName: 'active',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return CommentList;\n}(Component);\n\nvar SingleComment =\n/*#__PURE__*/\nfunction (_Component2) {\n  _inherits(SingleComment, _Component2);\n\n  function SingleComment() {\n    var _getPrototypeOf2;\n\n    var _this4;\n\n    _classCallCheck(this, SingleComment);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this4 = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SingleComment)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this4.removeComment = function () {\n      _this4.props.removeComment(_this4.props.comment.id);\n\n      console.log(_this4.props.comment.id);\n    };\n\n    return _this4;\n  }\n\n  _createClass(SingleComment, [{\n    key: \"render\",\n    value: function render() {\n      console.log(this.props.currentUser.uid);\n      console.log(this.props.diary.userID);\n      var comment = this.props.comment; //<span className=\"handle\">{comment.userName} </span>\n\n      var content = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }); //others comment \n      //if comment's commenter's id is different that writer's id\n\n      var button = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      });\n\n      if (this.props.comment.userID === this.props.currentUser.uid) {\n        button = React.createElement(\"div\", {\n          className: \"col-1\",\n          id: \"removeComment\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          id: \"oneCommentIn\",\n          onClick: this.removeComment,\n          className: \"btn\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 109\n          },\n          __self: this\n        }, \"x\"));\n      }\n\n      if (this.props.comment.userID !== this.props.diary.userID) {\n        content = React.createElement(\"div\", {\n          className: \"container mb-3\",\n          id: \"commentContainerOther\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"row p-3 py-2 border\",\n          id: \"oneComment\",\n          style: {\n            backgroundColor: this.props.comment.color\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"col-lg-2 col-md-3\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          id: \"oneCommentIn\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 119\n          },\n          __self: this\n        }, this.props.comment.displayName)), React.createElement(\"div\", {\n          className: \"col pl-4 pl-lg-1 align-center\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 125\n          },\n          __self: this\n        }, comment.text)), button)); //writer's comment\n      } else {\n        content = React.createElement(\"div\", {\n          className: \"container mb-3\",\n          id: \"commentContainerOwn\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 133\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"row p-3 py-2 bg-white border\",\n          id: \"ownComment\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 134\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"col-lg-2 col-md-3\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 135\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          id: \"oneCommentIn\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136\n          },\n          __self: this\n        }, this.props.comment.displayName)), React.createElement(\"div\", {\n          className: \"col pl-4 pl-lg-1\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 140\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 142\n          },\n          __self: this\n        }, comment.text)), button));\n      }\n\n      console.log(document.getElementById('removeComment'));\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, content);\n    }\n  }]);\n\n  return SingleComment;\n}(Component);\n\nexport default CommentList;","map":{"version":3,"sources":["/Users/PhilipChoi/Desktop/milimili/src/CommentList.js"],"names":["React","Component","firebase","ReactPaginate","CommentList","props","removeComment","commentKey","database","ref","child","diary","key","remove","state","comments","activePage","handlePageChange","bind","pageNumber","console","log","setState","on","snapshot","val","exists","off","content","commentKeys","Object","keys","commentObject","map","commentObj","id","object","currentUser","pageCount","SingleComment","comment","uid","userID","button","backgroundColor","color","displayName","text","document","getElementById"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport firebase from 'firebase/app';\nimport 'firebase/database';\nimport ReactPaginate from 'react-paginate';\n// import \"bootstrap-less\";\n\n// require(\"bootstrap/less/bootstrap.less\");\n\n\nclass CommentList extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            comments: [],\n            activePage: ''\n        }\n        this.handlePageChange = this.handlePageChange.bind(this)\n\n    }\n\n    handlePageChange(pageNumber) {\n        console.log(`active page is ${pageNumber}`);\n        this.setState({ activePage: pageNumber });\n    }\n\n\n    removeComment = (commentKey) => {\n        firebase.database().ref(`shared/diaries/`).child(this.props.diary.key).child(\"comments\").child(commentKey).remove();\n    }\n\n    componentDidMount() {\n        firebase.database().ref(`shared/diaries/`).child(this.props.diary.key).child(\"comments\").on(\"value\", (snapshot) => {\n            console.log(snapshot.val())\n            if (snapshot.exists()) {\n                this.setState({ comments: snapshot.val() })\n            }\n        })\n    }\n\n    componentWillMount() {\n        firebase.database().ref('unregister').off();\n    }\n    render() {\n        // let refComment = firebase.database().ref(`shared/diaries/${this.props.diary.userID}-${this.props.diary.date}/comments`)\n        // console.log(typeof(refComment))\n        let content = '';\n        console.log(\"comments\")\n        console.log(this.state.comments)\n        if (this.state.comments !== []) {\n            let commentKeys = Object.keys(this.state.comments)\n            // console.log(chirpsKeys);\n            let commentObject = commentKeys.map((key) => {\n                let commentObj = this.state.comments[key];\n                commentObj.id = key;\n                return commentObj;\n            })\n            content = commentObject.map((object) => {\n                return (<SingleComment removeComment={this.removeComment} key={object.id} comment={object} currentUser={this.props.currentUser} diary={this.props.diary} />)\n            })\n        }\n        return (\n            <div className=\"container commentBox\">\n                {content}\n                {/* <Pagination \n                 activePage={this.state.activePage}\n                 itemsCountPerPage={10}\n                 totalItemsCount={450}\n                 pageRangeDisplayed={5}\n                 onChange={this.handlePageChange}\n                 /> */}\n                <ReactPaginate\n                    previousLabel={'previous'}\n                    nextLabel={'next'}\n                    breakLabel={'...'}\n                    breakClassName={'break-me'}\n                    pageCount={this.state.pageCount}\n                    marginPagesDisplayed={2}\n                    pageRangeDisplayed={5}\n                    // onPageChange={this.handlePageClick}\n                    containerClassName={'pagination'}\n                    subContainerClassName={'pages pagination'}\n                    activeClassName={'active'}\n                />\n            </div>);\n    }\n}\n\n\nclass SingleComment extends Component {\n    removeComment = () => {\n        this.props.removeComment(this.props.comment.id);\n        console.log(this.props.comment.id)\n    }\n\n    render() {\n        console.log(this.props.currentUser.uid)\n        console.log(this.props.diary.userID)\n        let comment = this.props.comment;\n        //<span className=\"handle\">{comment.userName} </span>\n        let content = <div></div>\n        //others comment \n        //if comment's commenter's id is different that writer's id\n        let button = <div></div>;\n        if (this.props.comment.userID === this.props.currentUser.uid) {\n            button = (<div className=\"col-1\" id=\"removeComment\">\n                <button id=\"oneCommentIn\" onClick={this.removeComment} className=\"btn\">\n                    x\n        </button>\n            </div>)\n        }\n        if (this.props.comment.userID !== this.props.diary.userID) {\n            content = (\n                <div className=\"container mb-3\" id=\"commentContainerOther\">\n                    <div className=\"row p-3 py-2 border\" id=\"oneComment\" style={{ backgroundColor: this.props.comment.color }}>\n                        <div className=\"col-lg-2 col-md-3\">\n                            <p id=\"oneCommentIn\">\n                                {this.props.comment.displayName}\n                            </p>\n                        </div>\n                        <div className=\"col pl-4 pl-lg-1 align-center\">\n                            {/* <span className=\"time\"><Time value={comment.time} relative/></span> */}\n                            <div>{comment.text}</div>\n                        </div>\n                        {button}\n                    </div>\n                </div>)\n            //writer's comment\n        } else {\n            content = (\n                <div className=\"container mb-3\" id=\"commentContainerOwn\">\n                    <div className=\"row p-3 py-2 bg-white border\" id=\"ownComment\">\n                        <div className=\"col-lg-2 col-md-3\">\n                            <p id=\"oneCommentIn\">\n                                {this.props.comment.displayName}\n                            </p>\n                        </div>\n                        <div className=\"col pl-4 pl-lg-1\">\n                            {/* <span className=\"time\"><Time value={comment.time} relative/></span> */}\n                            <div>{comment.text}</div>\n                        </div>\n                        {button}\n                    </div>\n                </div>\n            )\n        }\n        console.log(document.getElementById('removeComment'))\n        return (\n            <div>\n                {content}\n\n            </div>\n        )\n    }\n}\n\nexport default CommentList"]},"metadata":{},"sourceType":"module"}